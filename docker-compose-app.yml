name: kafka-reactor
services:
  app:
    platform: linux/amd64
    build:
      context: ./
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
    networks:
      docker-net:
    depends_on:
      - kafka
      - kafka2
      - postgres
    volumes:
      - "./scripts/:/var/scripts/"
    healthcheck:
      test: [ "CMD", "/bin/bash", "-c", "/var/scripts/check_log.sh", '"Started KafkaReactorApplication"' ]
      interval: 5s
      retries: 10
      start_period: 1s
      timeout: 5s
  kafka:
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
  kafka2:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,PLAINTEXT_INTERNAL://kafka2:29093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
    volumes:
      - "./scripts/:/scripts/"
    healthcheck:
      test: [ "CMD", "/bin/bash", "-c", "/scripts/check_log.sh", '"started (kafka.server"' ]
      interval: 5s
      retries: 10
      start_period: 1s
      timeout: 5s
    networks:
      - docker-net